[{"/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/index.js":"1","/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/App.js":"2","/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/reportWebVitals.js":"3","/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/Data/test_data.js":"4","/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/components/Pagination.js":"5","/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/components/RepositoryCard.js":"6"},{"size":547,"mtime":1608746257794,"results":"7","hashOfConfig":"8"},{"size":2537,"mtime":1608760186016,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608746097318,"results":"10","hashOfConfig":"8"},{"size":38918,"mtime":1608747645906,"results":"11","hashOfConfig":"8"},{"size":5607,"mtime":1608756841596,"results":"12","hashOfConfig":"8"},{"size":1769,"mtime":1608754876445,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x5s1v2",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},"/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/index.js",[],"/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/App.js",[],"/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/reportWebVitals.js",[],"/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/Data/test_data.js",[],["29","30"],"/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/components/Pagination.js",["31","32","33"],"import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\n/**\n * Helper method for creating a range of numbers\n * range(1, 5) => [1, 2, 3, 4, 5]\n */\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n}\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\n\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\n\n    // pageNeighbours can be: 0, 1 or 2\n    this.pageNeighbours = typeof pageNeighbours === 'number'\n      ? Math.max(0, Math.min(pageNeighbours, 2))\n      : 0;\n\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n\n    this.state = { currentPage: 1 };\n  }\n\n  /**\n   * Let's say we have 10 pages and we set pageNeighbours to 2\n   * Given that the current page is 6\n   * The pagination control will look like the following:\n   *\n   * (1) < {4 5} [6] {7 8} > (10)\n   *\n   * (x) => terminal pages: first and last page(always visible)\n   * [x] => represents current page\n   * {...x} => represents page neighbours\n   */\n  fetchPageNumbers = () => {\n    const totalPages = this.totalPages;\n    const currentPage = this.state.currentPage;\n    const pageNeighbours = this.pageNeighbours;\n\n    /**\n     * totalNumbers: the total page numbers to show on the control\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n     */\n    const totalNumbers = (this.pageNeighbours * 2) + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours);\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n      let pages = range(startPage, endPage);\n\n      /**\n       * hasLeftSpill: has hidden pages to the left\n       * hasRightSpill: has hidden pages to the right\n       * spillOffset: number of hidden pages either to the left or to the right\n       */\n      const hasLeftSpill = startPage > 2;\n      const hasRightSpill = (totalPages - endPage) > 1;\n      const spillOffset = totalNumbers - (pages.length + 1);\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case (hasLeftSpill && !hasRightSpill): {\n          const extraPages = range(startPage - spillOffset, startPage - 1);\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\n          break;\n        }\n\n        // handle: (1) {2 3} [4] {5 6} > (10)\n        case (!hasLeftSpill && hasRightSpill): {\n          const extraPages = range(endPage + 1, endPage + spillOffset);\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\n          break;\n        }\n\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case (hasLeftSpill && hasRightSpill):\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n          break;\n        }\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  }\n\n  render() {\n    if (!this.totalRecords || this.totalPages === 1) return null;\n\n    const { currentPage } = this.state;\n    const pages = this.fetchPageNumbers();\n\n    return (\n      <Fragment>\n        <nav aria-label=\"Repositories Pagination\">\n          <ul className=\"pagination\">\n            { pages.map((page, index) => {\n\n              if (page === LEFT_PAGE) return (\n                <li key={index} className=\"page-item\">\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\n                    <span aria-hidden=\"true\">&laquo;</span>\n                    <span className=\"sr-only\">Previous</span>\n                  </a>\n                </li>\n              );\n\n              if (page === RIGHT_PAGE) return (\n                <li key={index} className=\"page-item\">\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={this.handleMoveRight}>\n                    <span aria-hidden=\"true\">&raquo;</span>\n                    <span className=\"sr-only\">Next</span>\n                  </a>\n                </li>\n              );\n\n              return (\n                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\n                  <a className=\"page-link\" href=\"#\" onClick={ this.handleClick(page) }>{ page }</a>\n                </li>\n              );\n\n            }) }\n\n          </ul>\n        </nav>\n      </Fragment>\n    );\n  }\n\n  componentDidMount() {\n    this.gotoPage(1);\n  }\n\n  gotoPage = page => {\n    const { onPageChanged = f => f } = this.props;\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\n    const paginationData = {\n      currentPage,\n      totalPages: this.totalPages,\n      pageLimit: this.pageLimit,\n      totalRecords: this.totalRecords\n    };\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  }\n\n  handleClick = page => evt => {\n    evt.preventDefault();\n    this.gotoPage(page);\n  }\n\n  handleMoveLeft = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\n  }\n\n  handleMoveRight = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\n  }\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\n\nexport default Pagination;\n","/Users/michaeljivan/Desktop/Code/React/repo-cards-pagination/src/components/RepositoryCard.js",["34"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RepositoryCard = ({repository}) => {\n  return (\n    <div className=\"col-md-12\">\n      <div className=\"country-card-container border-gray rounded border mx-2 my-3 d-flex flex-row align-items-center p-0 bg-light\">\n        <div className=\"px-3\">\n          <img style={{ height: \"75px\", width: \"75px\" }} src={repository.avatar_url}/>\n          {' '}\n          <a href={repository.svn_url} target={\"blank\"}>\n              {repository.title}\n            </a>\n          <span className=\"country-name text-dark d-block font-weight-bold\">Agency Name: {repository.org_name}</span>\n          <p className=\"country-region text-secondary\">Title: { repository.title }</p>\n          <span className=\"country-region text-secondary\">Description: { repository.description }</span>\n          <div className=\"datetime\">\n            Last updated:{\" \"}\n            {`${new Date(repository.updated_at).toDateString()}, ${new Date(\n              repository.updated_at\n            ).toLocaleTimeString()}`}\n          </div>\n\n          <div>\n            Languages:{\" \"}\n            {repository.languages.length !== 0 ? (\n              <i>{repository.languages.join(\", \")}</i>\n            ) : (\n              <i>No Languages</i>\n            )}\n          </div>\n\n          <div>\n            Score:{\" \"}\n            {repository.score === \"null\" ? (repository.score = \"Unverified\") : null}\n            \n              {repository.score === \"Alerts\"\n                ? `${repository.score} (${repository.alerts.length})`\n                : repository.score}\n            \n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nRepositoryCard.propTypes = {\n    repository: PropTypes.shape({})\n};\n\nexport default RepositoryCard;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":121,"column":19,"nodeType":"41","endLine":121,"endColumn":105},{"ruleId":"39","severity":1,"message":"40","line":130,"column":19,"nodeType":"41","endLine":130,"endColumn":102},{"ruleId":"39","severity":1,"message":"40","line":139,"column":19,"nodeType":"41","endLine":139,"endColumn":88},{"ruleId":"42","severity":1,"message":"43","line":9,"column":11,"nodeType":"41","endLine":9,"endColumn":87},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]